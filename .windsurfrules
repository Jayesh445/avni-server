# Avni Server Windsurf Rules
version = 1.0.0

# Tech Stack
- it uses JPA, Spring Security, Spring Batch, and Spring Rest
- it connects to a Postgres database
- flyway is used for database migrations

# Language usage
- Do not add comments and null checks unless asked
- Check Java version from .java_version
- always add new methods at the end of the file

# Code organization
- Repository and domain code goes in avni-serer-data module.
- Service, controller, mapper, and dto code goes in avni-server-api module. Flyway migrations are in this module.

# Building blocks (or where to put which type of code)
- There are following building blocks for request processing - Controller, Service, Mapper, Repository, and DTO.
- Batch jobs use Tasklet/Job - which inturn should use Writer or Service
- DTOs are of three types - Request, Response, and Contract.
- Repository should have only basic database operations directly using JPA for single entity type usually. Repository should be responsible for calling external services like Metabase, S3, etc.
- Service should have all the business logic. It can have mapper, repository, or other services
- Mapper should map between domain objects and DTO objects and vice versa
- take request in a typed dto and return response in a typed dto
- use BaseRepository always and getPrisma method from it
- the web response contract classes are called Response
- Mapper should use Repository and not Service
- Controller can use Service or Repository depending on the complexity of the operation

#----------------------------------------------
# CODE STYLE AND FORMATTING
#----------------------------------------------
# General Code Style
codeStyle.indentation = spaces
codeStyle.indentSize = 4
codeStyle.lineLength = 120

#----------------------------------------------
# ARCHITECTURE AND DESIGN PATTERNS
#----------------------------------------------
# Code Patterns
patterns.controllers = **/*Controller.java
patterns.services = **/*Service.java
patterns.repositories = **/*Repository.java
patterns.entities = org/avni/server/domain/**/*.java

## Architecture principles
# Controller Layer Principles
controller.principles = Keep controllers thin, Delegate business logic to services, Use DTOs for request/response objects, Implement proper error handling, Document APIs with OpenAPI/Swagger

# Domain Model Guidelines
domain.principles = Use rich domain models, Encapsulate business rules within domain objects, Validate domain invariants, Use value objects for immutable concepts, Consider using domain events for cross-aggregate communication

# Refactoring Guidelines
modularity.principles = Create small, focused methods with a single responsibility, Limit method size to improve readability and testability, Extract complex logic into separate utility classes, Use immutable objects wherever possible, Avoid deep nesting of methods and control structures, Prefer self-documenting code over comments